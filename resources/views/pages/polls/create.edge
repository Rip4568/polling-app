@layout.main({ title: "Create new Poll" })
    <main class="container mx-auto p-4 w-sm">
      <form method="POST" class="shadow-md px-8 pt-6 pb-8 mb-4 bg-secondary-dark rounded flex flex-col" name="poll-form" action="">
        {{ csrfField() }}
          {{--  <input type="file" name="banner" accept="image/*" class="rounded border-none px-4 py-2 bg-gray-600 mb-4" placeholder="asd">  --}}
          <input type="text" required value="TITULO QUALQUER AQUI" name="title" placeholder="Title Poll Here..." autocomplete="off" class="rounded border-none px-4 py-2 bg-gray-600 mb-4">
          <input type="text" required value="DESCRIÇÃO QUALQUER AQUI" name="description" placeholder="description Poll Here..." autocomplete="off" class="rounded border-none px-4 py-2 bg-gray-600 mb-4">
          <button class="btn btn-primary" type="submit">Create Poll</button>
      </form>
    </main>
@end

<script>
  window.document.addEventListener('DOMContentLoaded', function (documentEvent) {
    
    async function createPoll(formHtml) {
      const formData = new FormData(formHtml);
      const data = {
        title: formData.get('title'),
        description: formData.get('description'),
        options: []
      };

      for (let [key, value] of formData.entries()) {
        if (key.startsWith('options option-') && value.trim() !== '') {
          data.options.push({ title: value.trim() });
        }
      }

      const response = await fetch("/api/v1/polls/", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'accept': 'application/json'
        },
        body: JSON.stringify(data)
      });

      console.info(response);
      return await response.json();
    }


    function listnerForm(){
      const formHtml = document.querySelector('form');
      formHtml.addEventListener('submit', async function(event) {
        event.preventDefault();
        const data = await createPoll(formHtml);
      });
    }
    
    listnerForm()
    
    let inputsCounterGenerated = 0;

    function buildInputUploadIcon(className, datasetCounter) {
      const form = document.querySelector('form');
      const input = document.createElement('input');
      input.type = 'file';
      input.name = `icons icon-${datasetCounter}`;
      input.dataset.counter = datasetCounter;
      input.className = `rounded border-none px-4 py-2 bg-gray-600 mb-4 ${className}`;
      return input;
    }

    // Function to create a new input element
    function buildInput(className, datasetCounter) {
      const form = document.querySelector('form');
      const input = document.createElement('input');
      input.type = 'text';
      input.name = `options option-${datasetCounter}`;
      input.placeholder = 'Poll Options...';
      input.autocomplete = 'off';
      input.dataset.counter = datasetCounter;
      input.className = `rounded border-none px-4 py-2 bg-gray-600 mb-4 ${className}`;
      return input;
    }

    // Function to add a new input to the form
    function addNewInput(listner = true) {
      const form = document.querySelector('form');
      const inputs = form.querySelectorAll('input[name*="options"]');
      const counterIncremented = ++inputsCounterGenerated;
      const newClassName = `option-${counterIncremented}`;
      const newInput = buildInput(newClassName, counterIncremented);
      form.insertBefore(newInput, form.querySelector('button'));
      if(listner) {
        listenerLastInput();
      }
    }

    // Function to remove an input from the form
    function deleteInput(className) {
      const input = document.querySelector(`.${className}`);
      if (input) {
        input.remove();
      }
    }

    // Function to add event listener to the last input
    function listenerLastInput() {
      const inputs = document.querySelectorAll('input[name*="options"]');
      const lastInput = inputs[inputs.length - 1];
      
      lastInput.addEventListener('input', function() {
        const inputsUpdated = document.querySelectorAll('input[name*="options"]');
        const myContentLength = this.value.length;
        let myPosition;
        inputsUpdated.forEach((input, index) => {
          if (input.dataset.counter === this.dataset.counter) {
            myPosition = index;
          }
        });        
        
        let iAmTheLast = this.dataset.counter === lastInput.dataset.counter;
        
        const nextInput = inputsUpdated[myPosition + 1];
        
        if (myContentLength > 0 && !nextInput) {
          addNewInput();
        }
        
        if (myContentLength == 0 && !nextInput.value) {
          nextInput.remove()
        }
      });

    }

    // Initialize with one input
    addNewInput(listner=false);
    listenerLastInput();
  });
</script>